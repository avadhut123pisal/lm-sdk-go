// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	// "strconv"

	// strfmt "github.com/go-openapi/strfmt"

	// "github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Collector collector
// swagger:model Collector
type LmotelCollectorData struct {
	Meta map[string]int `json:"meta"`
	Data DataV4         `json:"data"`
}
type DataV4 struct {
	AllIds []collID   `json:"allIds"`
	ByID   LmotelCollectors `json:"byId"`
}
type collID struct {
	ID    string `json:"id"`
	Model string `json:"model"`
}
type LmotelCollectors struct {
	LmotelCollectors map[string]LmotelCollector `json:"lmotelcollectors"`
}
type LmotelCollector struct {
	CopyURL     string `json:"copyUrl"`
	DownloadURL string `json:"downloadUrl"`
	CreatedOn   int64  `json:"createdOn"`
	Config      string `json:"collectorConf"`
	CollectorType   string         `json:"collectorType"`
	Description     string         `json:"description"`
	Platform        string         `json:"platform"`
	Format          string         `json:"format"`
	Version         string         `json:"build"`
}



// // Validate validates this collector
// func (m *LmotelCollectorData) Validate(formats strfmt.Registry) error {
// 	var res []error

// 	if err := m.validateAutomaticUpgradeInfo(formats); err != nil {
// 		res = append(res, err)
// 	}

// 	if err := m.validateCustomProperties(formats); err != nil {
// 		res = append(res, err)
// 	}

// 	if err := m.validateNextUpgradeInfo(formats); err != nil {
// 		res = append(res, err)
// 	}

// 	if err := m.validateOnetimeDowngradeInfo(formats); err != nil {
// 		res = append(res, err)
// 	}

// 	if err := m.validateOnetimeUpgradeInfo(formats); err != nil {
// 		res = append(res, err)
// 	}

// 	if len(res) > 0 {
// 		return errors.CompositeValidationError(res...)
// 	}
// 	return nil
// }

// func (m *LmotelCollectorData) validateAutomaticUpgradeInfo(formats strfmt.Registry) error {

// 	if swag.IsZero(m.AutomaticUpgradeInfo) { // not required
// 		return nil
// 	}

// 	if m.AutomaticUpgradeInfo != nil {
// 		if err := m.AutomaticUpgradeInfo.Validate(formats); err != nil {
// 			if ve, ok := err.(*errors.Validation); ok {
// 				return ve.ValidateName("automaticUpgradeInfo")
// 			}
// 			return err
// 		}
// 	}

// 	return nil
// }

// func (m *LmotelCollectorData) validateCustomProperties(formats strfmt.Registry) error {

// 	if swag.IsZero(m.CustomProperties) { // not required
// 		return nil
// 	}

// 	for i := 0; i < len(m.CustomProperties); i++ {
// 		if swag.IsZero(m.CustomProperties[i]) { // not required
// 			continue
// 		}

// 		if m.CustomProperties[i] != nil {
// 			if err := m.CustomProperties[i].Validate(formats); err != nil {
// 				if ve, ok := err.(*errors.Validation); ok {
// 					return ve.ValidateName("customProperties" + "." + strconv.Itoa(i))
// 				}
// 				return err
// 			}
// 		}

// 	}

// 	return nil
// }

// func (m *LmotelCollectorData) validateNextUpgradeInfo(formats strfmt.Registry) error {

// 	if swag.IsZero(m.NextUpgradeInfo) { // not required
// 		return nil
// 	}

// 	if m.NextUpgradeInfo != nil {
// 		if err := m.NextUpgradeInfo.Validate(formats); err != nil {
// 			if ve, ok := err.(*errors.Validation); ok {
// 				return ve.ValidateName("nextUpgradeInfo")
// 			}
// 			return err
// 		}
// 	}

// 	return nil
// }

// func (m *LmotelCollectorData) validateOnetimeDowngradeInfo(formats strfmt.Registry) error {

// 	if swag.IsZero(m.OnetimeDowngradeInfo) { // not required
// 		return nil
// 	}

// 	if m.OnetimeDowngradeInfo != nil {
// 		if err := m.OnetimeDowngradeInfo.Validate(formats); err != nil {
// 			if ve, ok := err.(*errors.Validation); ok {
// 				return ve.ValidateName("onetimeDowngradeInfo")
// 			}
// 			return err
// 		}
// 	}

// 	return nil
// }

// func (m *LmotelCollectorData) validateOnetimeUpgradeInfo(formats strfmt.Registry) error {

// 	if swag.IsZero(m.OnetimeUpgradeInfo) { // not required
// 		return nil
// 	}

// 	if m.OnetimeUpgradeInfo != nil {
// 		if err := m.OnetimeUpgradeInfo.Validate(formats); err != nil {
// 			if ve, ok := err.(*errors.Validation); ok {
// 				return ve.ValidateName("onetimeUpgradeInfo")
// 			}
// 			return err
// 		}
// 	}

// 	return nil
// }

// MarshalBinary interface implementation
func (m *LmotelCollectorData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LmotelCollectorData) UnmarshalBinary(b []byte) error {
	var res LmotelCollectorData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
